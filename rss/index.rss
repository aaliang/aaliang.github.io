<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>import theworldj._</title><description>no results found</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Mon, 04 Apr 2016 19:40:00 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>@tailrec</title><description>&lt;p&gt;Next week I am returning to industry. It's been just under eight months since I've pulled in a steady paycheck and I'm just about ready to go back. Looking back at my break I still think it was the right decision. At the very least I've gained two life skills:&lt;/p&gt;</description><link>http://localhost:2368/tailrec/</link><guid isPermaLink="false">12e64da7-2908-4368-9d88-8f2c4d3158ab</guid><dc:creator>Andy Liang</dc:creator><pubDate>Mon, 04 Apr 2016 19:32:00 GMT</pubDate><content:encoded>&lt;p&gt;Next week I am returning to industry. It's been just under eight months since I've pulled in a steady paycheck and I'm just about ready to go back. Looking back at my break I still think it was the right decision. At the very least I've gained two life skills: how to properly use a french press (I'm a sorry excuse for a human adult) and how to ride a motorbike. I'm extremely fortunate to have been able to afford pushing the eject button. In today's world of over-sharing it's easy to get swayed by what your peers are doing - maybe they're buying houses, getting married, pursuing advanced degrees, etc. These are all awesome things for the right people and great things to live for.&lt;/p&gt;

&lt;p&gt;To be honest, leaving a career  in pursuit of self-improvement is really not a grandiose thing to do. In fact it's absolutely selfish. Few people have the means or support system to eschew adult responsibilities for extended periods of time. When I left [the only home I've ever known] last summer I didn't have a concrete goal, yes I had abstract thoughts about what I wanted to do but I wouldn't have been able to describe what my endgame was. I really only had two (and a half) things to cross off my bucket list which was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go backpacking in Southeast Asia&lt;/li&gt;
&lt;li&gt;go to the Recurse Center in New York City&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm extremely privileged to have been able to do this. To many people when they start their first job they'll have to keep working until they're forced to retire. Often times people hate the situation they're in but stick it out because their alternative prospects aren't as great. Other people eventually convince themselves to like it because they have to keep up an image or lifestyle.&lt;/p&gt;

&lt;p&gt;Cards on the table: finding a good job after taking a hiatus from tech wasn't exactly a walk in the park. I walked away from a lot of interviews thinking they were slam dunks only to get a &lt;strong&gt;thanks for interviewing with us, but we don't want you&lt;/strong&gt;-type response (there have been many of these). I don't have any insightful advice on this front aside. Just keep your head up - treat every time that you feel unwanted as another chip on your shoulder. For everyone who says you're not good enough, use this as a chance to prove to yourself that you are.&lt;/p&gt;

&lt;p&gt;It took me longer than expected to put ink on paper for the right opportunity. Come next Monday I'll be starting in Union Square NYC leading the next generation of backend development on &lt;a href="http://indicative.com"&gt;Indicative's&lt;/a&gt; behavioral analytics platform.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/04/DSC_0628.png" alt=""&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;println!("thanks!");  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Metaprogramming In Rust</title><description>&lt;h3 id="background"&gt;Background&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I've been hanging out at the Recurse Center over the last seven weeks. People come to RC for lots of different reasons, from different backgrounds. However, everyone has one thing in common: they want to get &lt;strong&gt;dramatically&lt;/strong&gt; better at programming.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my primary goals at RC was to&lt;/p&gt;</description><link>http://localhost:2368/metaprogramming-in-rust/</link><guid isPermaLink="false">a1ae455b-fdb8-466a-a1f6-f2132306863b</guid><category>Rust</category><category>Metaprogramming</category><category>Recurse Center</category><category>Hacker School</category><dc:creator>Andy Liang</dc:creator><pubDate>Sat, 14 Nov 2015 01:46:21 GMT</pubDate><content:encoded>&lt;h3 id="background"&gt;Background&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I've been hanging out at the Recurse Center over the last seven weeks. People come to RC for lots of different reasons, from different backgrounds. However, everyone has one thing in common: they want to get &lt;strong&gt;dramatically&lt;/strong&gt; better at programming.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of my primary goals at RC was to get up to speed on the &lt;a href="https://rust-lang.org"&gt;Rust&lt;/a&gt; programming language. Personally I'm a fan learning many programming languages of all shapes and sizes. Programming languages (and technologies in the computing world) come and go at a furious rate. If you decide to adopt the next over-hyped language every-time someone tells you to, you probably won't ever get the chance to get really good at something. However, I do think it's super important to grok something new every now and then to assimilate a new paradigm into your programmer's toolkit (akin to the Borg mentality).&lt;/p&gt;

&lt;p&gt;I'm not going to wax poetic about the virtues of using (or learning) Rust. The learning curve is admittedly frustratingly high, arguably higher if you have had prior C or C++ exposure. Furthermore I only know of two companies rumored to be using Rust aside from Mozilla, and at the time of this writing neither of them have deployed it to production yet to the best of my knowledge. Though it will probably never dethrone C++ I still think it is worth learning (at least for me). Someone more well-versed than me can probably explain in detail the cool reasons why you should learn Rust offers. But hey, this is something that interests me and I'm going to keep at it.&lt;/p&gt;

&lt;p&gt;Taking the time to learn Rust has been very fruitful during my time at RC. It simply would not have been possible for me to learn at this pace if I was working concurrently in industry. You learn about a lot of things along the way from all the incredibly detailed messages the borrow checker (compiler) throws at you when you try to return pointers for objects created during the lifetime of a function (turns out this is dangerous for a non-garbage collected language as you cannot reasonably predict how long the reference is valid for) to accessing shared (unprotected) mutable state across multiple threads (convince yourself that this is a terrible idea) and everything in-between. While such things seem obvious on paper, these are still incredibly common mistakes but Rust makes it impossible for these things to happen (or at least makes it incredibly difficult for you to do).&lt;/p&gt;

&lt;h3 id="oksohowdoesmetaprogrammingcomein"&gt;Ok so how does metaprogramming come in?&lt;/h3&gt;

&lt;p&gt;As a statically typed systems language, Rust requires you to specify the length of your arrays at compile time, like C++ (even Java and Scala). Arrays are also strictly fixed length and stack-allocated in Rust. In more dynamic languages Arrays are usually a misnomer and are better described as ArrayLists (looking at you JavaScript). You don't really have to worry about declaring length - and you can trivially grow the size of your array in JavaScript during runtime.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// declares an array of 15 32-bit unsigned integers initialized to 0
// (on the RHS, arrays can be specified to a default value)
let my_array:[u32; 15] = [0; 15];  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arrays have a type signature of &lt;strong&gt;[ &lt;em&gt;type&lt;/em&gt; ; &lt;em&gt;length&lt;/em&gt; ]&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// you can't do something like this:

fn do_something (len: usize) {  
  let my_array:[u32; len] = [0; len];
}

// You end up with a compile time error like this
// error: no type for local variable 26
// src/node.rs:8     let my_array:[u32; len] = [0; len];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To note, this post was inspired when I was working on my &lt;a href="https://github.com/aaliang/ailmedak"&gt;Ailmedak&lt;/a&gt; project. Ailmedak is my interpretation of a Distributed Hash Table described by the &lt;a href="https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf"&gt;Kademlia paper&lt;/a&gt;. For added fun and challenge it avoids using dynamic memory as much as possible. It requires an extremely reliable and low latent network connecting nodes before a significant performance advantage over heap allocated nodes can be realized (in  other words there's no real advantage of using Ailmedak except possibly in an embedded system).&lt;/p&gt;

&lt;p&gt;The following examples I cite will be in context of simplified things that I've done in the Ailmedak codebase.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Node {

  // Nodes have ids. and right now they're an array of 8-bit unsigned
  // integers (aka byte array of length 20)
  fn generate_new_id () -&amp;gt; [u8; 20];

  // Nodes do stuff with ids of other nodes
  fn do_something_with_id (&amp;amp;self, id: &amp;amp;[u8; 20] );
  fn consume_id (&amp;amp;mut self, id: [u8; 20])

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the contrived example above we have functions that either return or accept as input ids which are 20-length byte arrays. Suppose that this works great for us at first. However, imagine that sometime in the future our requirements change and we change our definition of an id as a 33-length byte array instead.&lt;/p&gt;

&lt;p&gt;If you're a perfectly reasonable person in order to support ease of development there are probably several approaches to use.&lt;/p&gt;

&lt;p&gt;The most obvious (and least painful) is to use a &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html"&gt;Vec&lt;/a&gt; which is a growable list type. This is analogous to Python's List, C++'s Vector, Java's ArrayList, and JavaScript's Array. However, for the sake of being particularly masochistic let's say this is not an option. Vecs in Rust are heap allocated (dynamic memory). There is some overhead when allocating heap memory (it's non deterministic in time) whereas stack allocation is relatively trivial from a performance perspective (all you do is increment the stack pointer).&lt;/p&gt;

&lt;p&gt;Well, every time you want to change the id length, you'd have to change the type signature  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Node {  
  fn generate_new_id () -&amp;gt; [u8; 33];
  fn do_something_with_id (&amp;amp;self, id: &amp;amp;[u8; 33] );
  fn consume_id (&amp;amp;mut self, id: [u8; 33] );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But then you'd have to do it for every id that gets returned, or used as input and this could get somewhat painful if you have a lot of functions.&lt;/p&gt;

&lt;p&gt;You could, however use type aliases:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type NodeId = [u8; 33];  
trait Node {  
  fn generate_new_id () -&amp;gt; NodeId;
  fn do_something_with_id (&amp;amp;self, id: &amp;amp;NodeId);
  fn consume_id (&amp;amp;mut self, id: NodeId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way you only have to change it in one place. However this is still flawed for future use. Suppose in the event that you now want the process to support operations on multiple types of nodes, some with ids of length 5, some length 10, some length 20, etc. The above trait only works for one specific sized array - you'd have to copy it in it's entirety into a separate Node5, Node10 trait etc.&lt;/p&gt;

&lt;h3 id="entergenerics"&gt;Enter Generics&lt;/h3&gt;

&lt;p&gt;Generics in Rust behave similarly to generics in Java/Scala as well as templates in C++. They provide a facility to provide a type as a parameter to structs, impls, traits, enums, and functions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Node &amp;lt;T&amp;gt; {  
  fn generate_new_id () -&amp;gt; T;
  fn do_something_with_id (&amp;amp;self, id: &amp;amp;T);
  fn consume_id (&amp;amp;mut self, id: &amp;amp;T);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then you could provide a concrete type  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type NodeId = [u8; 20];  
struct MyNode;  
impl Node &amp;lt;NodeId&amp;gt; for MyNode {  
  fn generate_new_id () -&amp;gt; NodeId;
  fn do_something_with_id (&amp;amp;self, id: &amp;amp;NodeId);
  fn consume_id (&amp;amp;mut self, id: &amp;amp;NodeId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would work pretty well... until the code evolves even more. Suppose you want to provide default implementation for generate_new_id in the Node trait. (similar to virtual functions in C++)&lt;/p&gt;

&lt;p&gt;A non-generic implementation of a generate_new_id could possibly look like this:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  fn generate_new_id () -&amp;gt; [u8; 20] {
    // using unsafe here to avoid specifying a default
    // we're overwriting the region of memory anyways
    // could easily default to 0 for this non-generic version
    let mut id_buf:[u8; 20] = unsafe { mem::uninitialized() };
    let mut nrg = rand::thread_rng();
    // iterator to generate a random byte value
    let iter = nrg.gen_iter::&amp;lt;u8&amp;gt;();
    for (x, i) in iter.take(20).enumerate() {
      id_buf[x] = i;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we try to place this into our generic trait we end up losing too much granularity, annotated in the code  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Node &amp;lt;T&amp;gt; {

  fn generate_new_id () -&amp;gt; T {
    let mut id_buf:T = unsafe { mem::uninitialized() };
    let mut nrg = thread_rng();
    // looks like we have to hardcode the type here but to what?
    let iter = nrg.gen_iter::&amp;lt;???&amp;gt;();
    // not even sure how much to take with the generic T
    for (x, i) in iter.take(???).enumerate() {
      id_buf[x] = i;
    }
  }

  fn do_something_with_id (&amp;amp;self, id: &amp;amp;T);

  fn consume_id (&amp;amp;mut self, id: &amp;amp;T);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the ??? marked sections above, there's no way to figure out: &lt;br&gt;
1. The length of the id &lt;br&gt;
2. The type of the Array. There's no reason why the array can't be an array of u32's or f64's etc.&lt;/p&gt;

&lt;p&gt;We have to go back to the [u8; 20] kind of way, except the length (and type) needs to be parametized. We need something better.&lt;/p&gt;

&lt;h3 id="beholdmacros"&gt;Behold, Macros&lt;/h3&gt;

&lt;p&gt;Macros are not a concept unique to Rust. They've been around in languages such as C, and Common Lisp. There's a lot of crazy shit you can do with macros.&lt;/p&gt;

&lt;p&gt;Macros in Rust look a lot like functions, except they emit code. They even behave sort of similarly when you expand them except they are expanded prior to the compilation phase. They can be expanded recursively and even have their own version of pattern matching to boot. A restriction is that they (the values they operate on) must be resolvable at runtime. The way to think about macros in Rust (or even in C) is that they &lt;em&gt;'return'&lt;/em&gt; code in-place that behaves as if you had written it there yourself.&lt;/p&gt;

&lt;p&gt;The syntax for invoking a macro is relatively flexible. &lt;br&gt;
generally goes like:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;macro_rules! /* NAME OF YOUR MACRO */ {  
  (/* MACRO ARGUMENTS (DOES NOT HAVE TO BE RUST CODE)*/) =&amp;gt; {
    /* WHATEVER YOUR MACRO SHOULD EXPAND TO (RUST CODE) */
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that we can have a macro expanding into a trait for our Node:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;macro_rules! meta_node {  
  // macro is invoked with an ident (called $name)
  // followed by "(id_len = "
  // followed by an expr (called $length)
  ($name:ident (id_len = $length:expr)) =&amp;gt; {
    pub trait $name &amp;lt;T&amp;gt; where T: PartialEq + PartialOrd + Rand {
      fn do_something_with_id (&amp;amp;self, id: &amp;amp;T) -&amp;gt; &amp;amp;[T; $length];
      fn consume_id (&amp;amp;mut self, id: T) -&amp;gt; [T; $length];
      fn generate_new_id () -&amp;gt; [T; $length] {
        let mut id_buf:[T; $length] = unsafe { mem::uninitialized() };
        let mut nrg = thread_rng();
        let iter = nrg.gen_iter::&amp;lt;T&amp;gt;();
        for (x, i) in iter.take($length).enumerate() {
          id_buf[x] = i;
        }
        id_buf
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we invoke our macro like so:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const ID_SIZE:usize = 20;  
meta_node!(ASizedNode (id_len = ID_SIZE));  
type NodeId = [u8; ID_SIZE];  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are essentially taking everything to the right of the =&gt;, replacing all instances of $name with ASizedNode, all instances of $length with 20, and then splatting the result as code. You end up with a trait called ASizedNode generating (and operating on) 20-length byte arrays Pretty powerful huh?!&lt;/p&gt;

&lt;p&gt;Finally you can create a concrete implementation of ASizedNode  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pub struct KademliaNode;

impl ASizedNode&amp;lt;u8&amp;gt; for KademliaNode {  
  fn do_something_with_id (&amp;amp;self, id: &amp;amp;NodeId) -&amp;gt; {
    println!("id: {:?}", id);
  }
  fn consume_id (&amp;amp;mut self, id: NodeId) -&amp;gt; {
    //do nothing else
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's pretty much it! Yeah, if we only cared about ids as inputs to functions  (and didn't care as much when we return) there would be a way to do this using array slices (slices don't require you to annotate the lengths) as they're really just borrowed sections of Arrays (or Vecs) with a start and and end. But then you lose some type safety without the lengths baked into the type signature. Please note that this only counts as compile-time metaprogramming. Rust does not have a reflection API that I'm aware of yet (and it probably wouldn't be an ideal solution as Rust emphasizes zero-cost abstractions :) )&lt;/p&gt;</content:encoded></item><item><title>Falling Back to Earth</title><description>&lt;h6 id="afollowuphttpblogtheworldjtktheonlyriskisthatyougoinsane"&gt;&lt;a href="http://blog.theworldj.tk/the-only-risk-is-that-you-go-insane/"&gt;A follow-up&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;It's been an incredible journey over the last month. Somewhere over either Vietnam or the South China Sea I was ambushed with the irony of flying halfway around the world just to move again a few days later. I couldn't, and still can't believe that this is finally&lt;/p&gt;</description><link>http://localhost:2368/falling-back-to-earth/</link><guid isPermaLink="false">3fb738a0-603c-4b8a-a486-3fbd6d3f677b</guid><dc:creator>Andy Liang</dc:creator><pubDate>Fri, 25 Sep 2015 16:37:35 GMT</pubDate><content:encoded>&lt;h6 id="afollowuphttpblogtheworldjtktheonlyriskisthatyougoinsane"&gt;&lt;a href="http://blog.theworldj.tk/the-only-risk-is-that-you-go-insane/"&gt;A follow-up&lt;/a&gt;&lt;/h6&gt;

&lt;p&gt;It's been an incredible journey over the last month. Somewhere over either Vietnam or the South China Sea I was ambushed with the irony of flying halfway around the world just to move again a few days later. I couldn't, and still can't believe that this is finally happening. This is something that I couldn't do until now.&lt;/p&gt;

&lt;p&gt;The sweltering heat is only one of the things you leave behind when traveling roughly 14,000 kilometers from Bangkok to Boston. After a couple days you learn to appreciate any air-conditioned havens you discover. Gone too is the maddening traffic, inhale-able pollution, and 3AM roadside $1 noodles with intense (and loud) philosophical debates sprinkled in (seriously though, why isn't this a thing in the states?)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0030.jpg" alt=""&gt;
&lt;sub&gt; &gt; this doesn't even count as rush hour&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0543.jpg" alt=""&gt;
&lt;sub&gt; &gt; some R&amp;amp;R in the middle of a rice paddy&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;My eyes were a little on the watery side that morning, I had to catch a 4AM taxi after all. I tried fitting a lot into the 3.5 weeks I was on the road, since I had left the conventional 9-5. I have no regrets about getting this show on the road and seeing where it leads in the coming months. I've learned over the last few years that it takes a much longer time for me to open up to people, even people that I've known for many moons. This will always be something that I need to work on and is one of the things that I've tried to break free of while traveling far away from home.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0974.jpg" alt=""&gt;
&lt;sub&gt; &gt; Bangkok on a &lt;em&gt;clear&lt;/em&gt; day&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;I've met so many people and new friends whether it be other weary travelers, locals, expats just over the last month (more than the combined last 4 years of my life) and as cliché as it sounds I'm so happy that I was able to spend time and experience new things together. It's unfortunate I had to go home so early and say goodbye to so many new friends.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0534.jpg" alt=""&gt;
&lt;sub&gt; &gt; Ing Doi / the Yawning Fields just outside of Pai. Ask Mink (the owner) for the red curry for &lt;em&gt;every&lt;/em&gt; meal. Get used to geckos though.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Not too long, one of my good friends from college introduced me to the personality types. It's been something that has mystified (and haunted) me over the last year especially how eerily accurate it can be sometimes. One guy I met on a bus to a ferry to get down to Koh Pha Ngan was particularly interested in the human psyche and was convinced that I was inherently extroverted based on the fact that we were talking the entire extent of the bus ride. I won't reveal what I've tested as because I don't believe that the four letters you get back envelops you as a person, it's important to remember that you can decide who you are as a person. I'll admit that I've been afraid of falling, of failure and rejection and I've tried to protect myself for too long now. But that's ok, everyone moves at their own pace. And everything is going to end up just fine.&lt;/p&gt;

&lt;p&gt;The decision to flee Boston was borderline desperate as a grandiose and maybe even gonzo plan of stepping into the nether. I still don't know how the next few months will end up turning out but if there's only one takeaway that I'll bring back to the states it's that I'll figure out a way to survive. I'm not worried about what comes next, but I sure am looking forward to it.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0616.jpg" alt=""&gt;
&lt;sub&gt; &gt; Chalok Lam, northernmost fishing village on Koh Pha Ngan. I hiked up here 3.5 miles with my 40L along the shore and through rolling hills in the hopes that a taxi boat would take me to a secluded beach unreachable by conventional road vehicles. The taxis only leave if the boats full - otherwise they rip you off for 200baht (it's the principle that gets to me, not the dollar amount) had to hike back down. The sand here was the best I found on the island though.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Getting to some of the remote parts of the region, off the beaten path, was one of the (many) highlights. Bangkok's a great city - one of my absolute favorites out of all of the ones I've passed through in my years of traveling. There's a reason why it's a cosmopolitan gem. It's one of those cities that you namedrop anywhere in the world, and people know about it; this is akin to first name athletes like Lebron, Peyton, Pedro, Roger, etc. you don't even need to name the last name, you just know. Once you get off the beaten path, you don't feel obliged to stick to the traditional guidebooks because there's so many more periods of not knowing. There's also a lot less expectations and more freedom to pace yourself to say the least.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0389.jpg" alt=""&gt;
&lt;sub&gt; &gt; I found myself standing in the middle of an alpaca farm / botanical garden in Mae Hong Son province when I was looking for the Thai-Burmese border. (you sort of head north until the road stops being road and yeah, I know they're just sheep - alpaca sounds more exotic)&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Similarly, Cambodia, though a hugely popular destination almost entirely because of Angkor, is another huge culture shock (but Thailand eases you into it). I wasn't even planning on making it to Cambodia halfway through but I decided to buy tickets on a night train from Surat Thani to Bangkok off of a tethered iPhone connection because I wasn't sure the next time that I'd be in the area.&lt;/p&gt;

&lt;p&gt;I'm pretty sure it's firmly ingrained into Khmer culture to politely badger people - you always have to keep smiling though. It's an asian concept to "keep face". It's also nicknamed &lt;em&gt;Scambodia&lt;/em&gt; for a reason. Tourist vs local prices, variations on the gem scam, creative stretching of the begging concept abound, and tipping immigration agents at the border (seriously this is considered normal practice - you just start handing over small bills until they guy starts smiling). I encountered no less than 3 school-kids lurking in a 200 meter swath of jungles around the temples of Siem Reap looking for a little money here and there. It's a well rehearsed dialogue. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
  &lt;li&gt;They'll ask you where you're from.&lt;/li&gt;
  &lt;li&gt;"Oh, USA? Capital: Washington DC, President: Barack Obama, Population: 300 million"&lt;/li&gt;
  &lt;li&gt;Then they'll ask you for a donation for their school on a pledge form filled with a bunch of generic names "Tim Smith" - $1000, etc.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0594.jpg" alt=""&gt;
&lt;sub&gt; &gt; The road from Thong Sala to Haad Yao&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Added on top, the infrastructure there can't keep up with the number of tourists passing through (and sometimes it seems on purpose). The hostel that we stayed at lost power no less than 4 times, though some of that was due to the construction crew (more like a mob) that was inexplicably digging up the side of the road only to fill it up again with more dirt. There's nothing to complain about though (not like I was carrying bricks of ice around in my gear) get 50 cent beer in the candlelit hostel bar was probably just as fun as getting it in conventional lighting. I've only been in a powerless bar once before (it was during a power outage in Boston - Yeah I don't get out much).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0941.jpg" alt=""&gt;
&lt;sub&gt; &gt; Get ready for touts. Just smile and shake your head.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Despite how pestering they can be, interacting with smiling Khmer are a real treat. After a rainstorm almost seems like small Khmer children will spawn out of the walls of popular temples to swarm and try to sell you cheap plastic raincoats. Now, I've never had dreams of fighting packs of midgets, but I suppose if you have that fantasy this would be the place to go (not that I condone violence to kids/anyone). If you can look a little further than the school-age girls in the covered markets &lt;em&gt;begging&lt;/em&gt; you to buy magnets and t-shirt in addition to the tuk-tuk lined streets where every driver asks "hey where you going?" or "you want tuk-tuk?", and trust me it gets tired and annoying fast, people can still be beautiful.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0840.jpg" alt=""&gt;
&lt;sub&gt; &gt; Just waiting for afternoon storm clouds to roll in @ Angkor Wat&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Originally I had intended to visit Angkor on a bike, at my own pace. When I stepped out of the airport in Siem Reap I hired a motorcycle taxi to bring me into town (quite an experience). Along the way, Rith, my Khmer driver (more like biker) who spoke excellent English explained that he's actually a farmer from several hours outside of Siem Reap and that due to heavy flooding he was working as a driver to support his family of 10. He told me he wanted to be my driver. Look, I'm well aware that people in desperate situations will say whatever they need to say, and stories like these can be tailor-made. The fact of the matter is that they're not looking to scam you out of your life savings. I'd already spent nearly a thousand USD to get to there on the flight alone - another few dollars will mean a whole lot more to locals than it will for me. And after that, if you end up hiring your driver - they'll be your best friend for the rest of the day (yeah, just realized I pretty much just described how to buy friends).&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0915.jpg" alt=""&gt;
&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0921.jpg" alt=""&gt;
&lt;sub&gt; &gt; The only thing that dwarfs the number and size of the temples within Angkor are the crowds. Go right after it rains.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0407.jpg" alt=""&gt;
&lt;sub&gt; &gt; Checkpoint on the border of Thailand and Burma, on the outskirts of Ban Raak Thai (Mae Aw). Doesn't seem like they issue visas here. You could pretty much walk across (or climb over the mountains if particularly adventurous). I didn't feel like getting arrested that day.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0481.jpg" alt=""&gt;
&lt;sub&gt; &gt; Somewhere between Pangmapha and Pai&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_1035.jpg" alt=""&gt;
&lt;sub&gt; &gt; The Reclining Buddha in Wat Pho. Back shot because I'm awkward like that.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0466.jpg" alt=""&gt;
&lt;sub&gt; &gt; Fish Cave (Tham Pla) it's more like Fish Hole. Hundreds (if not thousands) of delicious carp line up to get into an underwater cave leading into a mountain. Very few appear to be leaving.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0706.jpg" alt=""&gt;
&lt;sub&gt; &gt; the Bayon, the King as Buddha&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0994.jpg" alt=""&gt;
&lt;sub&gt; &gt; Golden Pagoda in the Grand Palace of Bangkok. Mobs of Chinese Tourists in their finest form &lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0296.jpg" alt=""&gt;
&lt;sub&gt; &gt; Mae Hong Son City, quintessential northern Thai town.&lt;/sub&gt;&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0985.jpg" alt=""&gt;
&lt;sub&gt; &gt; 8 baht boats in canals with dead cats floating around the surface? Must be in Bangkok!&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0617.jpg" alt=""&gt;
&lt;sub&gt; &gt; Haad Yao. Seriously just get a bike in KP though. It's worth it and your passport won't go anywhere. (All shops on KP require it as deposit - for good reason)&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;I don't really have a point that I'm getting to but thanks so much for reading. The memories are too many to list (and most of what happens in Bangkok needs to stay in Bangkok anyways). I'll always remember Ting Tong and how he drove us around at least 6 times all the while with &lt;em&gt;too&lt;/em&gt; many people crammed into the back seat passing around an awful bottle of Thai whiskey. Not sure if I can ever look at birthday cards in the same way though ;)&lt;/p&gt;

&lt;p&gt;Bring it on New York, I'm ready. I've had pizza on the other side of the world - let's see what the fuss is about.&lt;/p&gt;

&lt;p&gt;To friends new and old, sayonara, sawadee, I guess I'll see you around.&lt;/p&gt;</content:encoded></item><item><title>The Only Risk Is That You Go Insane</title><description>&lt;p&gt;I landed in this country 6 days ago. I've traversed nearly 1,000 kilometers in that span via taxi, pickup truck, ferry, train, subway, mini-van, motorbike, and of course my legs. Just 8 days ago I was still a full-time employee at &lt;em&gt;redacted&lt;/em&gt;. &lt;sup id="fnref:1"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0190.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;It was drizzling when I deplaned&lt;/p&gt;</description><link>http://localhost:2368/the-only-risk-is-that-you-go-insane/</link><guid isPermaLink="false">9add68cd-578b-46a5-b013-fabde40593a6</guid><dc:creator>Andy Liang</dc:creator><pubDate>Sun, 06 Sep 2015 13:20:47 GMT</pubDate><content:encoded>&lt;p&gt;I landed in this country 6 days ago. I've traversed nearly 1,000 kilometers in that span via taxi, pickup truck, ferry, train, subway, mini-van, motorbike, and of course my legs. Just 8 days ago I was still a full-time employee at &lt;em&gt;redacted&lt;/em&gt;. &lt;sup id="fnref:1"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0190.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;It was drizzling when I deplaned at Bangkok's Suvarnabhumi Airport, this came as no surprise as it pretty much rains briefly every single day in mainland SEA's wet season (typically between June - October). I had been wearing the same swag t-shirt from my previous employer for 24 hours, suffice it to say, I was not feeling fresh &lt;sup id="fnref:2"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. The wetness definitely washed away some of the face-oils so I wasn't complaining. I've done long plane rides before. I've spent many summers visiting extended family in Taiwan so I knew that the ride would be grueling, especially if you're a little squeamish at the idea of flying 1.2 kilometers over the open Pacific.&lt;sup id="fnref:3"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;When I was a kid, a Nintendo Gameboy would hold me over, provided that the battery lasted  the entire trip (usually didn't). This time a different problem manifested. Somewhere over Lake Erie (BOS -&gt; DTW) the screen on the iPhone decided to stop responding to my touch. My lock button hasn't worked ever since I thought it would be a good idea to listen to music in the shower (turns out it's a bad idea). I spent 5 hours toggling the vibrate momentary as well as continuously pressing the home screen just to get the battery to drain in the hope that when it eventually restarted, it would go back to normal (it did). &lt;sup id="fnref:4"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0426.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;I suppose now would be a good time to mention why I'm doing what I'm doing. Since I was a sophomore in college I've held a job of some form. When I graduated I was extremely lucky that tech was just blowing up and have had the grand fortune of waltzing from job to job. These positions more or less presented themselves in front of me. As much as I'd like to believe that any life successes are an acme of my natural talent, I'm skeptical of such a claim. Sometimes it seems that I'm just a passenger to the events that have unfolded around me. Additionally while I won't claim that I've lived with a silver spoon in my mouth, I've never had to go to bed hungry, and with that I owe the world to my parents.&lt;/p&gt;

&lt;p&gt;Objectively speaking, there's pretty much only one thing I'm good at and that thing is writing software (more specifically algorithmic analysis). Over the course of my post-undergraduate career I've had the privilege of working for three world-class organizations. I joined my last position with the goal of laying the foundation for building a multiple-system operator (MSO) capable of competing with big cable, completely over IP - in industry parlance over-the-top. I accepted an interview on a whim and arrived at the office when it was just 4 people chilling in a warehouse loft in Boston's Seaport District. We've now hit the point where it's just about to go live with about 70 real employees. Similar to how a humpback whale might out of the ocean to get some air, I was able to look back at what I've done during my tenure there.  I've designed many things addressing unique problem sets that I'm proud of including FP-style libraries, ultra-low latency backbones, and other heaps of things that I can't really divulge right now; all of which I've spent many many weeks laboring over and essentially surrendered over.&lt;/p&gt;

&lt;p&gt;Any half-decent engineer probably provides value that far exceeds their compensation, but demand has driven market compensation to ridiculous levels. Selfishly, I realize that demand for qualified techies today has never been this high. But yet I feel unsatisfied, call it a quarter-life crisis. I've spent so much time bringing the ideas of other people to fruition; it's just so much easier to hit pause and walk away (for now). Walk away from a perfectly good job? Why not?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0128.jpg" alt=""&gt;
&lt;sub&gt; &gt; Yeah sure whatever, what could possibly go wrong?&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;My time in Southeast Asia is relatively short, compared to most of the backpackers here on the Banana Pancake Trail. I'm spending a grand total of 23 days in Thailand (considering sneaking into Burma for a couple hours but responsible me isn't sure how I'll adapt to a Burmese jail.) &lt;sup id="fnref:5"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; After this I'm spending a couple days back in New England then moving down to NYC where I'll be joining &lt;em&gt;The Recurse Center&lt;/em&gt; until the end of the year.&lt;/p&gt;

&lt;p&gt;For the uninitiated, the &lt;a href="http://www.recurse.com"&gt;Recurse Center&lt;/a&gt; is the self-purported "best programming community in the world". The reason behind this is because I feel that I need to broaden my horizons (not to sound cliche) and re-strategize the trajectory that I'm going while I can still afford to do so. This is something that I feel like I have to do now, otherwise I'll always regret not doing it. Everything else (that house, car, jetski) can wait. After RC I'm keeping my options wide open : )&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0134.jpg" alt=""&gt;
&lt;sub&gt; &gt; Fuck. caves are just awesome.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0151.jpg" alt=""&gt;
&lt;sub&gt; &gt; But so are waterfalls! Not sure which one I'd pick to be honest : caves vs waterfalls. This is like pizza vs burritos all over again.&lt;sup id="fnref:6"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Back to when I landed in Bangkok... I had done some very tentative planning before I left. I put together a laundry list of days in the geographical regions that I wanted to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 x Siem Reap/Angkor War&lt;/li&gt;
&lt;li&gt;4 x Bangkok&lt;/li&gt;
&lt;li&gt;4 x Southern Kohs&lt;/li&gt;
&lt;li&gt;5 x Chiang Mai&lt;/li&gt;
&lt;li&gt;6 x Days spare (maybe Laos?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It didn't take very long for this list to get axed. I cleared customs at the airport around 11:20 PM. Bangkok public transport shuts down at midnight, which in my opinion is straight up unacceptable for a major metropolitan area of over 14 million people. To be fair though cabs and &lt;a href="https://en.wikipedia.org/wiki/Auto_rickshaw"&gt;tuk-tuks&lt;/a&gt; are extremely cheap, to the point that a 15-minute cab ride priced a couple shades under 6 USD is labeled a scam. It was around 11:45PM when I read the confirmation e-mail and realized that I wouldn't make it to the hostel that I had booked in Sukhumvit before the reception closed (also midnight).&lt;/p&gt;

&lt;p&gt;I was slightly perturbed but somehow in my jet-lagged haze I managed to make it to Khao San Road, commonly regarded as the epicenter for backpacking in SEA. As it turns out, it's stupid easy to just show up at any place of accommodation and ask for a room. Ever since I've been deciding where to go next ad-hoc, sometimes mere minutes before leaving, probably not going to go to Cambodia/Laos. Traveling solo has it's benefits after all!&lt;/p&gt;

&lt;p&gt;&lt;sub&gt; &gt; Hey man, would it be ok if I fell down here? &lt;/sub&gt;
&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0186.jpg" alt=""&gt;
&lt;sub&gt; &gt; Naw man. If you fall here you die in real life. &lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;The above is Pai Canyon. The ridges can get quite narrow (and steep), if a sudden downpour happens you're screwed.&lt;/p&gt;

&lt;p&gt;I spent less than a day in Bangkok. I woke up early the next morning, bought a razor blade and a yogurt from the 7-eleven and started heading north to Chiang Mai with a stopover in Ayutthaya. Saw some pretty cool ruins on the way but I wasn't really feeling energetic, being jet-lagged and all.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0003.jpg" alt=""&gt;
&lt;sub&gt; &gt; Even the scaffolding is 99.9999999% authentic Khmer.&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;In the beginning I was bored out of my mind when I got to Chiang Mai. Seemingly every travel blogger is/has been based out of there at some point and everyone raves about how you can't spend enough time up north. But personally I felt that once you've seen a couple of temples, you've seen them all. Plus there were an inordinate number of western middle-aged men with dangerously young Thai girls. The cafe and food scene was admittedly pretty bumping though. It wasn't until I headed even further north that I came into my groove.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0240.jpg" alt=""&gt;
&lt;sub&gt; &gt; My bike &lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;It turns out that the best way to experience the north is to rent a motorbike. There's just something about driving in the mountains, through flash downpours while ignoring road signs you can't understand. If there's something that looks like it might be interesting (not that you'd know) you can just go there &lt;sup id="fnref:7"&gt;&lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fn:7" rel="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;. Seems like every other building is a guesthouse so accommodation is a breeze.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0267.jpg" alt=""&gt;
&lt;sub&gt; &gt; My other bike (swapped it out to get from Pai to Mae Hong Son)&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;And with that I sign off half-way through my road-trip (or so I think) from Mae Hong Son. I'm not so sure where I'll end up between here and NYC but the road will always twist on. (Unless of course it ends abruptly in Burma)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0068.jpg" alt=""&gt;
&lt;sub&gt; &gt; Pai at night is often described as the biggest frat-party in the East with an abundance of early 20s trust-fund kiddies on holiday. I can confirm, probably the biggest collection of Greek letters I've seen east of Athens (absolutely nothing wrong with that though!). Hell of a time though!&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0317.jpg" alt=""&gt;
&lt;sub&gt; &gt; Road-side market in the far north&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0351.jpg" alt=""&gt;
&lt;sub&gt; &gt; So I heard you like &lt;a href="https://en.wikipedia.org/wiki/Bokeh"&gt;bokeh&lt;/a&gt;...&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0504.jpg" alt=""&gt;
&lt;sub&gt; &gt; Now if only Anheuser made drinking water too. Oh wait...&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2015/09/DSC_0107-1.jpg" alt=""&gt;&lt;/p&gt;

&lt;div class="footnotes"&gt;&lt;ol&gt;&lt;li class="footnote" id="fn:1"&gt;&lt;p&gt;Technicality: I'm on sabbatical/leave of absence. I am not ruling out the possibility of  a return to my previous employer. Additionally I'm under a PIPA so I'm not going to mention the company name right now. As it is a sensitive time right before the go-live. &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:1" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="footnote" id="fn:2"&gt;&lt;p&gt;It's important to stay fresh, thanks Jersey Shore &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:2" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="footnote" id="fn:3"&gt;&lt;p&gt;As an aside who's your favorite LOST character? Mine's Vincent. &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:3" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="footnote" id="fn:4"&gt;&lt;p&gt;I also tried hard restoring it off of my laptop but it won't allow you to restore it as long as &lt;em&gt;Find My iPhone&lt;/em&gt; is turned on. Couldn't exactly do that without the screen working... wtf Apple? &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:4" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="footnote" id="fn:5"&gt;&lt;p&gt;I'm writing this from Mae Hong Son in northern Thailand. There is an unofficial border cross into a tiny Burmese village just north of  Ban Rak Thai, a village composed of (the descendants of) KMT soldiers who fled China's Yunnan province after being defeated by the CPC. The only way to reach the Burmese village is through Thailand, as no official road connects it to the Burmese highway and rumor is the guards usually don't really care if you cross over. &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:5" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="footnote" id="fn:6"&gt;&lt;p&gt;Burritos, by the way. &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:6" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="footnote" id="fn:7"&gt;&lt;p&gt;Actually there was one sign that was in English that said "Asia's longest cave system" that I tried going to, but the well-paved road abruptly turned to gravel. Decided not to risk getting a road tattoo. Cue the "why come you don't have a tattoo reference" &lt;a href="http://localhost:2368/the-only-risk-is-that-you-go-insane/#fnref:7" title="return to article"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content:encoded></item><item><title>borrow checker battles in rust</title><description>&lt;p&gt;Likely the first thing that baby rustaceans will bang their heads on is the concept of lifetimes and the borrow checker. One of the things I took for granted in virtually every other programming language that I used was the ability to call methods off of an object without too&lt;/p&gt;</description><link>http://localhost:2368/fighting-the-rust-borrow-checker/</link><guid isPermaLink="false">de9c7c27-a875-4ee5-8bb6-251f0713631a</guid><dc:creator>Andy Liang</dc:creator><pubDate>Sat, 25 Jul 2015 03:21:48 GMT</pubDate><content:encoded>&lt;p&gt;Likely the first thing that baby rustaceans will bang their heads on is the concept of lifetimes and the borrow checker. One of the things I took for granted in virtually every other programming language that I used was the ability to call methods off of an object without too much fuss. Calling methods needs to be handled drastically differently in rust-lang.&lt;/p&gt;

&lt;p&gt;In the listing below I'm trying to model a simple type representing a node in a simple neural network:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An instance of a Neuron will contain a 32 bit integer for the number of inputs it takes &lt;em&gt;num_inputs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;It will also contain a vector of weights (as 64-bit floating points) that dictate the value of those inputs &lt;em&gt;weights&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The corresponding struct probably looks something like this:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Neuron {  
    num_inputs: i32,
    weights: Vec&amp;lt;f64&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We'll also want to create the rust analogue to a static method &lt;em&gt;(Neuron::new)&lt;/em&gt; which serves as a constructor by randomly generating a total of &lt;em&gt;ninputs&lt;/em&gt; floating points to populate a Neuron struct accordingly. &lt;em&gt;Note that in the listing we're actually creating ninputs+1&lt;/em&gt;  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;impl Neuron {

    fn new (ninputs: i32) -&amp;gt; Neuron {
        let mut weight_vec = Vec::new();
        // add {ninputs+1} weights...
        for _ in 0..(ninputs+1) {
            weight_vec.push(rand::random::&amp;lt;f64&amp;gt;());
        }
        Neuron{num_inputs: ninputs, weights: weight_vec}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let's say we want to do some quality logging at some point and we would like to print out each of the weights in a neuron's vector. For convenience let's make it a method! Hmm yeah...! let's add it to &lt;code&gt;impl Neuron&lt;/code&gt; shall we?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;impl Neuron {

    /* ... blah blah... fn new still looks the same */

    fn print_weights (self) {
        for weight in self.weights {
            println!("{}", weight);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can instantiate an instance, and then print the weights like so:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fn main() {  
    let a_neuron = Neuron::new(2);
    a_neuron.print_weights();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With any luck we'd probably see something like this:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.7330616595228169  
0.6183962989161881  
0.79081893581957  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what if we wanted to print it again?  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let a_neuron = Neuron::new(2);  
a_neuron.print_weights();  
a_neuron.print_weights();  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where everything falls apart and you start to turn to StackOverflow (by way of google of course). You'll most likely see a compiler error along the lines of:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use of moved value `a_neuron`  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what's going on here? If we take a look at the signature for &lt;code&gt;Neuron::print_weights&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fn print_weights (self)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out that because of the&lt;code&gt;self&lt;/code&gt; parameter, when the method is called  &lt;code&gt;a_neuron.print_weights&lt;/code&gt; implicitly takes ownership of &lt;code&gt;self&lt;/code&gt; (these are move semantics). When &lt;code&gt;a_neuron.print_weights&lt;/code&gt; is called the second time, ownership is never yielded back to the main function (or whatever function we calling it from).&lt;/p&gt;

&lt;p&gt;In order to make this work, we need to &lt;strong&gt;declare print_weights as a borrow, as well as the access to self.weights&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    fn print_weights (&amp;amp;self) {
        for weight in &amp;amp;self.weights {
            println!("{}", weight);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our full listing ends up looking something like this:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extern crate rand;

struct Neuron {  
    num_inputs: i32,
    weights: Vec&amp;lt;f64&amp;gt;
}

impl Neuron {

    fn new (ninputs: i32) -&amp;gt; Neuron {
        let mut weight_vec = Vec::new();
        //add {ninputs + 1} weights
        for _ in 0..(ninputs+1) {
            weight_vec.push(rand::random::&amp;lt;f64&amp;gt;());
        }
        Neuron{num_inputs: ninputs, weights: weight_vec}
    }

    fn print_weights (&amp;amp;self) {
        for weight in &amp;amp;self.weights {
            println!("{}", weight);
        }
    }
}

fn main() {  
    let a_neuron = Neuron::new(2);
    a_neuron.print_weights();
    a_neuron.print_weights();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And hopefully we see output along the lines of:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.45597887767522716  
0.6523807976419703  
0.43939320025023854  
0.1353881594997136  
0.45597887767522716  
0.6523807976419703  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that I do not claim to know everything and all there is to know about Rust! If I got anything wrong and if there is anything that I should mention, please be sure to let me know!&lt;/p&gt;</content:encoded></item></channel></rss>